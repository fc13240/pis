<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ideaStreet.dao.mapper.ArticleMapper">
	
	<resultMap type="Article" id="ArticleResultMap">
		<id property="id" column="id"/>
		<result property="keywords" column="keywords"/>
		<result property="author" column="author"/>
		<result property="title" column="title"/>
		<result property="source" column="source"/>
		<result property="content" column="content"/>
		<result property="articleAbstract" column="abstract"/>
		<result property="createTime" column="create_time"/>
		<result property="publishTime" column="publish_time"/>
		<result property="updateTime" column="update_time"/>
		<result property="checkStatus" column="check_status"/>
		<result property="smallImgUrl" column="small_img_url"/>
		<result property="upVote" column="up_vote"/>
		<result property="downVote" column="down_vote"/>
		<association property="articleType" resultMap="ArticleTypeResultMap"/>
		<association property="user" resultMap="UserResultMap"/>
	</resultMap>
	
	<resultMap type="User" id="UserResultMap">
		<id property="userId" column="user_id"/>
		<result property="username" column="username"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="qq" column="qq"/>
		<result property="weChat" column="weChat"/>
		<result property="avatarUrl" column="avatar_url"/>
	</resultMap>	  
	
	<resultMap type="ArticleImg" id="ArticleImgMap">
		<id property="imgId" column="img_id"/>
		<result property="imgUrl" column="img_url"/>
		<result property="articleId" column="article_id"/>
		<result property="caption" column="caption"/>
	</resultMap>
	
	<resultMap type="ArticleType" id="ArticleTypeResultMap">
		<id property="typeId" column="type_id"/>
		<result property="typeName" column="type_name"/>
	</resultMap>
	
	<resultMap type="ArticleComment" id="ArticleCommentMap">
		<id property="commentId" column="comment_id"/>
		<result property="createTime" column="create_time"/>
		<result property="content" column="content"/>
		<result property="articleId" column="article_id"/>
		<association property="user" javaType="User">
				<id property="userId" column="user_id"/>
				<result property="username" column="username"/>
			</association>
	</resultMap>
	
	<select id="getArticleShow" resultMap="ArticleResultMap">
		(SELECT * FROM (SELECT id,title,small_img_url,keywords,publish_time FROM article n  WHERE DATE(publish_time) = CURDATE() 
			AND check_status=1
			ORDER BY publish_time DESC) AS n1 )
			UNION ALL
			(SELECT * FROM (SELECT e.id,e.title,e.small_img_url,e.keywords,e.publish_time
			FROM article  e  LEFT JOIN article_comments c  ON c.article_id = e.id   
				AND e.check_status=1 
			GROUP BY id ORDER BY COUNT(1) DESC,publish_time DESC ) AS n2)  LIMIT 0,7;
	</select>
	
	<select id="getArticleByRand" resultMap="ArticleResultMap">
		SELECT id,title
		FROM article 
		where  check_status=1 ORDER BY RAND() limit 10
	</select>
	
	<select id="getUserArticleById"  parameterType="int" resultMap="ArticleResultMap">
		SELECT n.id,n.keywords,n.author,n.title,n.source,n.content,n.abstract,n.create_time,n.publish_time,n.update_time,
		nt.type_id ,nt.type_name,u.user_id,u.username,n.up_vote,n.down_vote
		FROM article n LEFT JOIN article_type nt ON  n.article_type=nt.type_id LEFT JOIN users u ON n.user_id=u.user_id 
		WHERE n.id=#{articleId}
	</select>
		
	<resultMap type="Vote" id="VoteResultMap">
		<result property="upVote" column="up_vote"/>
		<result property="downVote" column="down_vote"/>
	</resultMap>
	
	<select id="getUserArticleByPage" parameterType="Page"  resultMap="ArticleResultMap">
		SELECT n.id,n.keywords,n.author,n.title,n.source,n.abstract,n.create_time,n.publish_time,n.update_time,
		n.content,nt.type_id ,nt.type_name,u.user_id,u.username,n.up_vote,n.down_vote
		FROM article n LEFT JOIN article_type nt ON  n.article_type=nt.type_id LEFT JOIN users u ON n.user_id=u.user_id 
		WHERE n.user_id=#{userId} and n.check_status=1 limit #{startIndex}, #{pageSize}
	</select>
	
	<select id="getUserArticleCount" parameterType="int" resultType="int">
		SELECT count(*)
		FROM article n LEFT JOIN article_type nt ON  n.article_type=nt.type_id LEFT JOIN users u ON n.user_id=u.user_id 
		WHERE n.user_id=#{userId} and n.check_status=1
	</select>	
	
	<select id="getAllArticle"  parameterType="Page"  resultMap="ArticleResultMap">
		(SELECT * FROM (SELECT id,title,small_img_url,keywords,publish_time FROM article n  
						WHERE DATE(publish_time) = CURDATE()
						  and check_status=1 
			ORDER BY publish_time DESC) AS n1 )
			UNION ALL
			(SELECT * FROM (SELECT e.id,e.title,e.small_img_url,e.keywords,e.publish_time
			FROM article  e  LEFT JOIN article_comments c  ON c.article_id = e.id   
				WHERE  DATE(e.publish_time) != CURDATE() AND e.check_status=1 
			GROUP BY id ORDER BY COUNT(1) DESC,publish_time DESC) AS n2) limit #{startIndex},#{pageSize} 
	</select>
	
	
	<select id="getAllArticleCount"  resultType="int">
		SELECT count(*)
		FROM article n LEFT JOIN article_type nt ON  n.article_type=nt.type_id LEFT JOIN users u ON n.user_id=u.user_id 
		where n.title is not null and n.check_status=1
	</select>
	
	
	
	<select id="getAllArticleTypes" resultMap="ArticleTypeResultMap">
		select type_id, type_name
		  from article_type
		 order by type_id asc;	
	</select>
	
	<delete id="deleteArticleById" parameterType="int">
		delete from article where id=#{articleId}
	</delete>
	
	<select id="getUpVoteAndDownVote" parameterType="int" resultMap="VoteResultMap">
		select up_vote,down_vote from article where id=#{id}
	</select>
	
	<update id="praise">
		update article set up_vote=#{upVote} where id=#{id}
	</update>
	
	<update id="slander">
		update article set down_vote=#{downVote} where id=#{id}
	</update>
	
	<insert id="addArticleComment">
		INSERT INTO article_comments(create_time,content,article_id,user_id) VALUES (NOW(),#{content},#{articleId},#{userId})
	</insert>
	
	<select id="getArticleCommentsById" parameterType="int" resultMap="ArticleCommentMap">
		SELECT comment_id,create_time,content,u.user_id,u.username 
		FROM article_comments ac
		LEFT JOIN users u ON u.user_id = ac.user_id
		WHERE article_id = #{articleId}
		order by create_time desc
	</select>
	
	<select id="articleShow" resultMap="ArticleResultMap">
		(SELECT * FROM (SELECT id,title,small_img_url,keywords,publish_time FROM article n  WHERE DATE(publish_time) = CURDATE()
			AND check_status=1
			ORDER BY publish_time DESC) AS n1 )
			UNION ALL
			(SELECT * FROM (SELECT e.id,e.title,e.small_img_url,e.keywords,e.publish_time
			FROM article  e  LEFT JOIN article_comments c  ON c.article_id = e.id   
			WHERE  DATE(e.publish_time) != CURDATE() AND e.check_status=1 
			GROUP BY id ORDER BY COUNT(1) DESC,publish_time DESC) AS n2 ) limit 12
	</select>
  </mapper>
  
